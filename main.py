import streamlit as st
import os.path
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build


SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials.json')
#credentials = service_account.Credentials.from_service_account_file(
#        SERVICE_ACCOUNT_FILE, scopes=SCOPES)

credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_service_account"], scopes=SCOPES)

# The ID and range of a sample spreadsheet.
SAMPLE_SPREADSHEET_ID = '1qZS-Y7NxD15B3rPTGpYIsZfF67ySaBjAEsUEsDIwTdo'
SAMPLE_RANGE_NAME = 'base'

service = build('sheets', 'v4', credentials=credentials).spreadsheets().values()




gsheetid = '1ubyAIc1JOWLRXz-vvTmfhbi1-AZALWKkQo8hJkfvVrc'
list_1 = 'menu'
list_2 = 'team'

df_dish_list_csv = "https://docs.google.com/spreadsheets/d/{}/gviz/tq?tqx=out:csv&sheet={}".format(gsheetid, list_1)
member_list_csv = "https://docs.google.com/spreadsheets/d/{}/gviz/tq?tqx=out:csv&sheet={}".format(gsheetid, list_2)
df_dish_list = pd.read_csv(df_dish_list_csv)
member_list = pd.read_csv(member_list_csv)
df_dish_list.set_index('dish_name', inplace=True)
df_dish_list = pd.Series(df_dish_list['dish_id'])
df_member_list = pd.Series(member_list['member'])

dish_list = df_dish_list.index
ln_list = len(dish_list)
today = datetime.today()
today_dish_list_csv = "https://docs.google.com/spreadsheets/d/{}/gviz/tq?tqx=out:csv&sheet={}".format(SAMPLE_SPREADSHEET_ID, SAMPLE_RANGE_NAME)
today_dish_list = pd.read_csv(today_dish_list_csv)
today_dish_list['–î–∞—Ç–∞'] = pd.to_datetime(today_dish_list['–î–∞—Ç–∞']).dt.date
today_dish_list_fin = today_dish_list[today_dish_list['–î–∞—Ç–∞'] == pd.Timestamp.today().date()]
table = pd.pivot_table(today_dish_list_fin, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', index='–ë–ª—é–¥–æ', aggfunc=sum)
edoki = today_dish_list_fin['–ï–¥–æ–∫'].unique()
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def show_predict_page():
    st.title('üçúü•ì–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –µ–¥—ãü•ìüçú')
    #d = st.date_input("–°–µ–≥–æ–¥–Ω—è:", today)
    st.write('–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', pd.Timestamp.today().date())
    if len(table) != 0:
        with st.expander("–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"):
            #st.header('–í—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:')
            #st.dataframe(data=today_dish_list_fin, width=None, height=None)
            st.header('–°–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:')
            st.table(data=table)
            #st.header('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–¥–æ–∫–æ–≤:')
            #st.table(data=edoki)
        if len(edoki) != 0:
            st.header('–ê–∫—Ç–∏–≤–Ω—ã–µ –µ–¥–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è:')
            for i in edoki:
                with st.expander(i):
                    edok_list = today_dish_list_fin[today_dish_list_fin['–ï–¥–æ–∫'] == i].drop(labels=['–î–∞—Ç–∞', '–ï–¥–æ–∫'], axis=1)
                    st.table(data=edok_list)
    else:
        st.info('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª')
    st.header('–ö—Ç–æ –≤—ã:')
    member = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–æ–∫–∞', df_member_list, index=0, horizontal=True)
    st.header('–ß—Ç–æ –±—É–¥–µ—Ç–µ –∫—É—à–∞—Ç—å?')
    order_list = []
    for i in range(0, ln_list):
        dish_list_radio = st.radio(df_dish_list.index[i], [int(0), int(1), int(2)], index=0, horizontal=True)
        dish_item = [df_dish_list.index[i], dish_list_radio]
        order_list.append(dish_item)
    order_list = pd.DataFrame(order_list, columns=['–ë–ª—é–¥–æ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
    order_list_not_zero = order_list[order_list['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] > 0]
    st.header('–í–∞—à –∑–∞–∫–∞–∑:')
    st.dataframe(data=order_list_not_zero, width=None, height=None)
    order_list_full = order_list_not_zero
    order_list_full['–ï–¥–æ–∫'] = member
    order_list_full['–î–∞—Ç–∞'] = str(today)
    order_list_full['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = order_list_full['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].astype('str')
    #st.dataframe(data=order_list_full, width=None, height=None)
    if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ–¥—É'):
      body = []
      for row in order_list_full.index:
        stroka = [order_list_full.loc[row][3], order_list_full.loc[row][2], order_list_full.loc[row][0], order_list_full.loc[row][1]]
        body.append(stroka)
      resp = service.append(spreadsheetId=SAMPLE_SPREADSHEET_ID, range=SAMPLE_RANGE_NAME, valueInputOption='USER_ENTERED', body={'values': body}).execute()
      st.success('–í–ê–® –ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢!')
# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

show_predict_page()
